generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id String @id @default(uuid())
  name String
  description String?
  type String
  users User[]
  street1 String? @db.VarChar(32)
  street2 String? @db.VarChar(32)
  city String? @db.VarChar(32)
  zip String? @db.VarChar(6)
  locked Boolean @default(false)
}

model User {
    id String @id @default(uuid())
    username String @unique
    password String
    firstname String
    lastname String
    createdAt DateTime 
    updatedAt DateTime @default(now())
    authGroup AuthGroup?
    store Store @relation(fields: [storeId], references: [id])
    storeId String
    superAdmin Boolean
    storeAdmin Boolean
    passwordReset Boolean
    locked Boolean @default(false)
    authorities   Authority[]
    userAttendences Attendacne[] @relation(name:"forUser")
    addedAttendences Attendacne[] @relation(name:"addedBy")
    approvedAttendences Attendacne[] @relation(name:"approvedBy")
    deletedAttendences Attendacne[] @relation(name:"deletedBy")
}

model AuthGroup {
    id String @id @default(uuid())
    name String @unique
    createdAt DateTime 
    updatedAt DateTime @default(now())
    authorities Authority[]
    user User @relation(fields: [userId], references: [id])
    userId String @unique
}

model Authority {
    id String @id @default(uuid())
    name String @unique
    authGroups AuthGroup[]
    users User[]
}

model Attendacne {
    id String @id @default(uuid())
    user User @relation(name:"forUser", fields: [userId], references: [id])
    userId String
    addedBy User @relation(name:"addedBy", fields: [addedById], references: [id])
    addedById String
    approvedBy User? @relation(name:"approvedBy", fields: [approvedById], references: [id])
    approvedById String?
    attendanceDate DateTime
    createdAt DateTime
    updatedAt DateTime @default(now())
    type String @db.VarChar(32)
    deleted Boolean @default(false)
    deletedBy User? @relation(name:"deletedBy", fields: [deletedById], references: [id])
    deletedById String?
}

